#Ke Li, 1005842554, damian.li@mail.utoronto.ca
#Weiyu Zhang

Part 1
    * 1.1
    the purpose is to form an url and use that url to generate the QR code.

    --> issuer & accountName

        we directly use the function urlEncode provided by "encoding.c" in lib
        to encode the input strings and concatenate them into the final url.

    --> secret_hex

        since the input value would be in hex, in order to encode the string, we
        need firstly convert it to binary format. after convert it into binary format, we use base32_encode to encode the binary string and use the return value and concatenate it into the final url.

    --> void hex_string_to_binary(const char *hex_string, uint8_t *binary_output)

        this function is used for converting the hex string into binary. In hex, 
        each char represent 4 bits (since hex is base-16). Therefore, two hex char represent 8 bits (or 1 byte)

        in the for loop:
            (hex_string + i) points to the current pair of hex char in the string
            
            %2hhx will read 2 hex char(each char is 8 bits == 1 byte) and convert them as the binary form which would be exactly 1 byte, and the format should be store in uint8_t, which is exactly 1 byte

            &binary_output[i / 2] store the pair byte(1 pair for 1 byte) into the binary output.


    * 1.2

Part 2
    * getAuthenticatorStatus
        Form the user authentication url and use GET API call, return 'active' if the status is active 
        and at least one of the biometric modalities is enrolled.

    * sendStepup
        Form the user verification url and use POST API call, and store the uuid from the return json
        data into self.user_verification.

    * getStepupStatus
        Form the url and use GET API call, fetches the status of the user auth request and return the status.